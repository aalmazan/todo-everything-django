default:
  image: python:3.11-slim-bullseye

stages:
  - build
  - test

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

build:
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  stage: build
  # Only build when there's changes to the following
  only:
    changes:
      - "docker/**/*"
      - ".gitalb-ci.yml"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --pull -t $CONTAINER_TEST_IMAGE -f docker/Dockerfile-web .
    - docker push $CONTAINER_TEST_IMAGE

test:
  stage: test
  image: $CONTAINER_TEST_IMAGE
  # Pip's cache doesn't store the python packages
  # https://pip.pypa.io/en/stable/reference/pip_install/#caching
  #
  # If you want to also cache the installed packages, you have to install
  # them in a virtualenv and cache it as well.
  before_script:
    # Force poetry to not create virtualenvs.
    # poetry seems to not look for an existing virtualenv when the Docker
    # container is loaded and will create a new virtualenv -- which will then
    # require a reinstall of all dependencies.
    - poetry config virtualenvs.create false --local
  script: poetry run invoke pytest --target=$CI_PROJECT_DIR
